-- Add new Item and Publisher at the same time
CREATE PROCEDURE uspAddFeeAndMembership(
@FeeAmount money, 
@FeeDesc varchar(100), 
@MembershipName varchar(50),
@MembershipDesc varchar(1000))
 
 
AS
BEGIN TRAN t1
 
INSERT INTO FEE (FeeAmount, FeeDescription) VALUES (@FeeAmount, @FeeDesc)
 
DECLARE @FeeID int = SCOPE_IDENTITY()
 
INSERT INTO MEMBERSHIP(MembershipName, MembershipDesc, FeeID) 
VALUES (@MembershipName, @MembershipDesc, @FeeID)
 
If @@error <> 0
        ROLLBACK TRAN t1
ELSE
        COMMIT TRAN t1
 
 
EXEC uspAddFeeAndMembership @FeeAmount = $15.00, @FeeDesc = 'extra fee for those who want extra stuff', @MembershipName = 'Premium membership', @MembershipDesc = 'extra fee for those who want extra stuff'
 
                                                                                                                           
2.                                                     
-- add new ITEM_CONDITION
 
CREATE PROCEDURE uspNewItemCondition (
@ItemName varchar(50),
@ConditionName varchar(50),
@RecordDate date
)
AS
DECLARE @ItemID int = (SELECT ItemID from ITEM WHERE ItemName = @ItemName)
DECLARE @ConditionID int = (SELECT ConditionID from CONDITION WHERE ConditionName = @ConditionName)
BEGIN TRAN T1
INSERT INTO ITEM_CONDITION (ItemID, ConditionID, RecordDate) VALUES (@ItemID, @ConditionID, @RecordDate)
IF @@error <> 0
        ROLLBACK TRAN T1
ELSE
        COMMIT TRAN T1
 
EXEC uspNewItemCondition @ItemName = '29', @ConditionName = 'Perfect', @RecordDate = '1999-01-17'
              
3.
-- no staff can have a start date in the future
 
CREATE FUNCTION fnNoStaffWithStartDateInFuture()
RETURNS INT
AS
BEGIN
DECLARE @ret int = 0
IF EXISTS(SELECT * FROM STAFF s
JOIN STAFF_POSITION sp ON s.StaffID = sp.StaffID
WHERE sp.StartDate > (GETDATE()))
        SET @ret = 1
RETURN @ret
END
ALTER TABLE STAFF_POSITION
ADD CONSTRAINT StartDateLessWeekAdvance
CHECK (dbo.fnNoStaffWithStartDateInFuture() = 0)
 
4.
-- no parties on the main floor
CREATE FUNCTION fn_NoPartiesOnMainFloor()
RETURNS INT
AS
BEGIN
DECLARE @ret int = 0
IF EXISTS(SELECT * FROM EVENT e
JOIN EVENT_TYPE et ON e.EventTypeID = et.EventTypeID
JOIN LOCATION l ON e.LocationID = l.LocationID
WHERE et.EventTypeName = 'Birthday Party'
AND l.LocationName = 'Main Floor.')
        SET @ret = 1
RETURN @ret
END
 
ALTER TABLE EVENT
ADD CONSTRAINT NoNoisyParties
CHECK (dbo.fn_NoPartiesOnMainFloor() = 0)
 
5.
-- number of employees in each staff position
CREATE FUNCTION fn_NumStaffInPosition (@PositionID int)
RETURNS INT
AS
BEGIN
DECLARE @ret int
SET @ret = (SELECT count(*) from STAFF s 
JOIN STAFF_POSITION sp ON s.StaffID = sp.StaffID
JOIN POSITION p ON sp.PositionID = p.PositionID
WHERE p.PositionID = @PositionID
AND (sp.EndDate > GETDATE() OR sp.EndDate IS NULL))
RETURN @ret
END
 
ALTER TABLE POSITION
ADD NumStaff
AS dbo.fn_NumStaffInPosition(PositionID)
 
 
6.
-- number of each type of incident
 
CREATE FUNCTION fn_NumIncidentType(@IncidentTypeID int)
RETURNS INT
AS
BEGIN
DECLARE @ret int
SET @ret = (SELECT count(*) from INCIDENT i WHERE i.IncidentTypeID = @IncidentTypeID)
RETURN @ret
END
 
ALTER TABLE INCIDENT_TYPE
ADD NumIncidentType
AS dbo.fn_NumIncidentType(IncidentTypeID)
 
7.
-- all current employees names, start date, and position name
 
CREATE VIEW vwCurrentStaffInformation AS
SELECT s.StaffFName, s.StaffLName, sp.StartDate, p.PositionName
FROM STAFF s
JOIN STAFF_POSITION sp ON s.StaffID = sp.StaffID
JOIN POSITION p ON sp.PositionID = p.PositionID
 
8.
-- all minor incidents 
CREATE VIEW vwAllMinorIncidents AS
SELECT i.IncidentName, i.IncidentDate, it.IncidentTypeName, it.IncidentTypeDescription
FROM INCIDENT i
JOIN INCIDENT_TYPE it ON i.IncidentTypeID = it.IncidentTypeID
WHERE it.IncidentTypeName = 'Minor'
Frederick Wijaya:
1) uspNewStaffPosition
2) uspNewEventStaff
3) ‘Youth’ memberships should not be allowed to borrow more than 3 books
4) seniors event is for senior memberships only
5) Number of days since event
6)number of times item has been borrowed
7) Number of Members for each type of Membership
8)Events located in the ballroom with more than 50 attending
 
1.
CREATE PROCEDURE uspNewStaffPosition
@Fname varchar(25),
@Lname varchar(25),
@Address varchar(100),
@Email varchar(25),
@PosName varchar(25),
@BeginDate date,
@EndDate date
AS
DECLARE @StaffID INT
DECLARE @PositionID INT
 
EXEC uspGetStaffID
@Fname = @Fname,
@Lname = @Lname,
@Address = @Address,
@Email = @Email,
@StaffID = @StaffID OUTPUT
 
EXEC uspGetPositionID
@PosName = @PosName,
@PositionID = @PositionID OUTPUT
 
IF @StaffID IS NULL
        BEGIN
        PRINT '@StaffID IS NULL and will fail on insert statement; process terminated'
        RAISERROR ('StaffID variable cannot be NULL', 11,1)
        RETURN
        END
 
IF @PositionID IS NULL
        BEGIN
        PRINT '@PositionID IS NULL and will fail on insert statement; process terminated'
        RAISERROR ('PositionID variable cannot be NULL', 11,1)
        RETURN
        END
 
BEGIN TRAN T1
INSERT INTO STAFF_POSITION (StaffID, PositionID, StartDate, EndDate)
VALUES (@StaffID, @PositionID, @BeginDate, @EndDate)
IF @@ERROR <> 0
        ROLLBACK TRAN T1
ELSE 
        COMMIT TRAN T1          
2.
CREATE PROCEDURE uspNewEventStaff
@Event varchar(25),
@Date date,
@Fname varchar(25),
@Lname varchar(25),
@Address varchar(100),
@Email varchar(25)
AS
DECLARE
@StaffID INT,
@EventID INT
 
EXEC uspGetStaffID
@Fname = @Fname,
@Lname = @Lname,
@Address = @Address,
@Email = @Email,
@StaffID = @StaffID OUTPUT
 
EXEC uspGetEventID
@Event = @Event,
@Date = @Date,
@EventID = @EventID OUTPUT
 
 
IF @StaffID IS NULL
        BEGIN
        PRINT '@StaffID IS NULL and will fail on insert statement; process terminated'
        RAISERROR ('StaffID variable cannot be NULL', 11,1)
        RETURN
        END
 
IF @EventID IS NULL
        BEGIN
        PRINT '@EventID IS NULL and will fail on insert statement; process terminated'
        RAISERROR ('EventID variable cannot be NULL', 11,1)
        RETURN
        END
 
BEGIN TRAN T1
INSERT INTO EVENT_STAFF (StaffID, EventID)
VALUES (@StaffID, @EventID)
IF @@ERROR <> 0
        ROLLBACK TRAN T1
ELSE 
        COMMIT TRAN T1
3.
CREATE FUNCTION fnYouthBooks(@memberID int)
RETURNS INT
AS
BEGIN
DECLARE @ret int = 0
IF EXISTS 
(SELECT * FROM [MEMBER] m
JOIN MEMBER_MEMBERSHIP mm ON m.MemberID = mm.MemberID
JOIN MEMBERSHIP ms ON ms.MembershipID = mm.MembershipID
JOIN (SELECT m.MemberID, COUNT(*) AS BooksBorrowed FROM ITEM it
      JOIN ITEM_TYPE itt ON itt.ItemTypeID = it.ItemTypeID
      JOIN EVENT_ITEM ei ON ei.ItemID = it.ItemID
      JOIN [EVENT] e ON e.EventID = ei.EventID
      JOIN [MEMBER] m ON m.MemberID = ei.MemberID
      JOIN EVENT_TYPE et ON et.EventTypeID = e.EventTypeID
      WHERE et.EventTypeName = 'Checkout'
      AND itt.ItemTypeName = 'Book'
      GROUP BY m.MemberID) subquery1 ON subquery1.MemberID = m.MemberID
WHERE subquery1.BooksBorrowed > 3
AND ms.MembershipName = 'Youth'
AND @memberID = m.MemberID)
  SET @ret = 1
RETURN @ret
END
 
ALTER TABLE MEMBER
ADD CONSTRAINT youth_books
CHECK (dbo.fnYouthBooks(MemberID) = 0)
use CENTRAL_LIBRARY
GO
 
4.
CREATE FUNCTION fnSeniorsOnly(@EventItemID int)
RETURNS INT
AS
BEGIN
DECLARE @ret int = 0
IF EXISTS 
(SELECT * FROM EVENT_ITEM ei
        JOIN [EVENT] e ON e.EventID = ei.EventID
        JOIN MEMBER m ON m.MemberID = ei.MemberID
        JOIN MEMBER_MEMBERSHIP mm ON m.MemberID = mm.MemberID
        JOIN MEMBERSHIP ms ON ms.MembershipID = mm.MembershipID
        WHERE e.EventName = 'Seniors Only Seminar'
        AND ms.MembershipName != 'Senior'
        AND ei.EventItemID = @EventItemID)
  SET @ret = 1
RETURN @ret
END
 
 
GO
 
ALTER TABLE EVENT_ITEM
ADD CONSTRAINT seniors_only
CHECK (dbo.fnSeniorsOnly(EventItemID) = 0)       
5.
CREATE FUNCTION fnTimesBorrowed(@ItemID int)
RETURNS int
AS
BEGIN
DECLARE @times int = (SELECT COUNT(*) FROM ITEM i
 JOIN EVENT_ITEM ei ON ei.ItemID = i.ItemID
 JOIN [EVENT] e ON e.EventID = ei.EventID
 JOIN EVENT_TYPE et ON et.EventTypeID = e.EventTypeID
 WHERE i.ItemID = @ItemID
 AND et.EventTypeName = 'Checkout')
RETURN @times
END
 
ALTER TABLE ITEM
ADD TimesBorrowed
AS dbo.fnTimesBorrowed(ItemID)
6.
CREATE FUNCTION fnDaysSinceCheckout(@EventID int)
RETURNS int
AS
BEGIN
DECLARE @BeginDate date = (SELECT EventDate FROM [EVENT] WHERE EventID = @EventID)
RETURN (DATEDIFF(DAY, @BeginDate, GetDate()))
END
 
GO
 
ALTER TABLE [EVENT]
ADD DaysSince
AS dbo.fnDaysSinceCheckout(EventID)
7.
CREATE VIEW V_MEMBERSHIP_COUNTS
AS
(SELECT ms.MembershipName, COUNT(mm.MemberID) AS 'MemberCount' FROM MEMBERSHIP ms
        JOIN MEMBER_MEMBERSHIP mm ON ms.MembershipID = mm.MembershipID
        GROUP BY ms.MembershipName)
8.
CREATE VIEW V_POPULAR_BALLROOM_EVENTS
AS
(SELECT e.EventName FROM [EVENT] e
        JOIN (SELECT e2.EventID, count(*) AS 'Attendees'
                        FROM [EVENT] e2
                        JOIN EVENT_ITEM ei ON ei.EventID = e2.EventID
                        JOIN LOCATION lo ON lo.LocationID = e2.LocationID
                        WHERE lo.LocationName = 'Ballroom'
                        GROUP BY e2.EventID) subquery1 ON subquery1.EventID = e.EventID
        WHERE subquery1.Attendees > 50)
GRAHAM KELLY
uspNewIncident
uspNewEventItem
Assert there is not more than 1 CLO employee
assert there is not more than 10 items associated with an event.
Add count of incidents a member is involved in
add fee total to member table.
Show all books in good condition or better and show position names
the count of em-ployees in that position involved in events.
1.

CREATE PROCEDURE uspNewIncident
@SFname VARCHAR(25),
@SLname VARCHAR(25),
@SEmail VARCHAR(25),
@SAdd VARCHAR(100),
@MFname VARCHAR(25),
@MLname VARCHAR(25),
@MEmail VARCHAR(25),
@MPhone VARCHAR(25),
@MDOB DATE,
@FAmt MONEY,
@FDSC VARCHAR(100),
@IncType VARCHAR(25),
@IncName VARCHAR(25),
@IncDate DATE
AS
DECLARE @SID INT
DECLARE @MID INT
DECLARE @ITID INT
DECLARE @FID INT
 
EXEC uspGetStaffID
@Fname = @SFname,
@Lname = @SLname,
@Address = @SAdd,
@Email = @SEmail,
@StaffID = @SID OUTPUT
 
EXEC uspGetMemberID
@Fname = @MFname,
@Lname = @MLname,
@Email = @MEmail,
@PhoneNumber = @MPhone,
@DOB = @MDOB,
@MemberID = @MID OUTPUT
 
EXEC uspGetIncidentTypeID
@TypeName = @IncType,
@IncidentTypeID = @ITID OUTPUT
 
EXEC uspGetFeeID
@FeeAmount = @FAmt,
@FeeDesc = @FDSC,
@FeeID = @FID OUTPUT
 
IF @SID IS NULL
        BEGIN
        PRINT '@StaffID IS NULL and will fail on insert statement; process terminated'
        RAISERROR ('StaffID variable cannot be NULL', 11,1)
        RETURN
        END
 
IF @MID IS NULL
        BEGIN
        PRINT '@MemberID IS NULL and will fail on insert statement; process terminated'
        RAISERROR ('MemberID variable cannot be NULL', 11,1)
        RETURN
        END
 
IF @ITID IS NULL
      BEGIN
      PRINT '@IncidentID IS NULL and will fail on insert statement; process terminated'
      RAISERROR ('IncidentID variable cannot be NULL', 11,1)
      RETURN
      END
 
IF @FID IS NULL
      BEGIN
      PRINT '@FeeID IS NULL and will fail on insert statement; process terminated'
      RAISERROR ('FeeID variable cannot be NULL', 11,1)
      RETURN
      END
 
BEGIN TRAN T1
INSERT INTO INCIDENT (IncidentName, IncidentDate, MemberID, FeeID, IncidentTypeID, StaffID)
VALUES (@IncName, @IncDate, @MID, @FID, @ITID, @SID)
IF @@ERROR <> 0
        ROLLBACK TRAN T1
ELSE
        COMMIT TRAN T1
GO
2.
CREATE PROCEDURE uspNewEventItem
@SFname VARCHAR(25),
@SLname VARCHAR(25),
@SEmail VARCHAR(25),
@SAdd VARCHAR(100),
@MFname VARCHAR(25),
@MLname VARCHAR(25),
@MEmail VARCHAR(25),
@MPhone VARCHAR(25),
@MDOB DATE,
@Ename VARCHAR(25),
@EDate DATE,
@Iname VARCHAR(25)
AS
DECLARE @SID INT
DECLARE @MID INT
DECLARE @EID INT
DECLARE @IID INT
 
EXEC uspGetStaffID
@Fname = @SFname,
@Lname = @SLname,
@Address = @SAdd,
@Email = @SEmail,
@StaffID = @SID OUTPUT
 
EXEC uspGetMemberID
@Fname = @MFname,
@Lname = @MLname,
@Email = @MEmail,
@PhoneNumber = @MPhone,
@DOB = @MDOB,
@MemberID = @MID OUTPUT
 
EXEC uspGetEventID
@Event = @Ename,
@Date = @EDate,
@EventID = @EID OUTPUT
 
EXEC uspGetItemID
@ItemName = @Iname,
@ItemID = @IID OUTPUT
 
IF @SID IS NULL
        BEGIN
        PRINT '@StaffID IS NULL and will fail on insert statement; process terminated'
        RAISERROR ('StaffID variable cannot be NULL', 11,1)
        RETURN
        END
 
IF @MID IS NULL
        BEGIN
        PRINT '@MemberID IS NULL and will fail on insert statement; process terminated'
        RAISERROR ('MemberID variable cannot be NULL', 11,1)
        RETURN
        END
 
IF @EID IS NULL
      BEGIN
      PRINT '@EventID IS NULL and will fail on insert statement; process terminated'
      RAISERROR ('EventID variable cannot be NULL', 11,1)
      RETURN
      END
 
IF @IID IS NULL
      BEGIN
      PRINT '@ItemID IS NULL and will fail on insert statement; process terminated'
      RAISERROR ('ItemID variable cannot be NULL', 11,1)
      RETURN
      END
 
BEGIN TRAN T1
INSERT INTO EVENT_ITEM (StaffID, MemberID, ItemID, EventID)
VALUES (@SID, @MID, @IID, @EID)
IF @@ERROR <> 0
        ROLLBACK TRAN T1
ELSE
        COMMIT TRAN T1
GO
3.
ALTER TABLE POSITION ADD CONSTRAINT CHK_clo_count CHECK (fn_PositionNumber(PositionID) <= 1 AND PositionName = 'CLO') GO
4.
CREATE FUNCTION fn_EventItemCount(@EID INT) RETURNS INT AS
  BEGIN
    DECLARE @r INT
    SET @r = (SELECT COUNT(*) FROM EVENT_ITEM AS ei
              JOIN ITEM AS i on ei.ItemID = i.ItemID
              WHERE ei.EventID = @EID)
    RETURN @r
  END
GO
 
ALTER TABLE EVENT_ITEM ADD CONSTRAINT CHK_item_count CHECK (fn_EventItemCount(MemberID) <= 10) GO
5.
CREATE FUNCTION memberIncidentCount(@MID int) RETURNS INT AS
  BEGIN
    DECLARE @r INT
    SET @r = (SELECT COUNT(*) FROM INCIDENT AS i WHERE i.MemberID = @MID)
    RETURN @r
  END
GO
 
ALTER TABLE MEMBER ADD IncidentCount AS memberIncidentCount(MemberID) GO
6.
CREATE FUNCTION memberIncidentFeeTotal(@MID INT) RETURNS INT AS
  BEGIN
    DECLARE @r INT
    SET @r = (SELECT SUM(f.FeeAmount) FROM MEMBER AS m
              JOIN INCIDENT AS i ON m.MemberID = i.MemberID
              JOIN FEE AS f ON i.FeeID = f.FeeID
              WHERE m.MemberID = @MID)
  END
GO
ALTER TABLE MEMBER ADD TotalIncidentFee AS memberIncidentFeeTotal(MemberID) GO
7.
CREATE VIEW V_BOOKS_GOOD_OR_BETTER AS
  (SELECT i.ItemName, i.ItemID FROM ITEM AS i
  JOIN ITEM_TYPE AS it ON it.ItemTypeID = i.ItemTypeID
  JOIN ITEM_CONDITION as ic ON ic.ItemID = i.ItemID
  JOIN CONDITION AS c ON ic.ConditionID = c.ConditionID
  WHERE it.ItemTypeName = 'Book' AND
        (c.ConditionName = 'Good' OR c.ConditionName = 'Very good' OR c.ConditionName = 'Great'
         OR c.ConditionName = 'Perfect' OR c.ConditionName = 'New'))
  GO
8.
CREATE VIEW V_STAFF_POSITION_COUNTS_INVOLVED_IN_EVENTS AS
  SELECT p.PositionName, COUNT(*) AS Count FROM POSITION AS p
  JOIN STAFF_POSITION AS sp ON p.PositionID = sp.PositionID
  JOIN STAFF AS s ON sp.StaffID = s.StaffID
  JOIN EVENT_STAFF AS es ON s.StaffID = es.StaffID
  GROUP BY p.PositionName
  GO